---
# framework implementation

apiVersion: kudo.k8s.io/v1alpha1
kind: FrameworkVersion
metadata:
  name: elastic-v1
  namespace: default
  labels:
    controller-tools.k8s.io: "1.0"
spec:
  version: "1.0.0"
  connectionString: ""
  framework:
    name: elastic
    kind: Framework
  parameters:
    - name: NODE_COUNT
      default: "3"
    - name: S3_ACCESS_KEY
      default: "minio"
    - name: S3_SECRET_KEY
      default: "minio123"
    - name: S3_ENDPOINT
      default: "minio:9000"
    - name: RESTORE_SNAPSHOT_ID
      default: ""
  templates:
    service.yaml: |
      kind: Service
      apiVersion: v1
      metadata:
        name: hs
        namespace: {{ .Namespace }}
      spec:
        selector:
          app: elastic
        ports:
          - protocol: TCP
            port: 9200
        clusterIP: None
    node.yaml: |
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: node
        namespace: {{ .Namespace }}
      spec:
        selector:
          matchLabels:
            app: elastic # has to match .spec.template.metadata.labels
        serviceName: {{ .Name }}-hs
        replicas: {{ .Params.NODE_COUNT }}
        template:
          metadata:
            labels:
              app: elastic # has to match .spec.selector.matchLabels
          spec:
            initContainers:
              - name: init-sysctl
                image: busybox
                command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
                securityContext:
                  privileged: true
              - name: volume-permissions
                image: busybox
                command: ['sh', '-c', 'chown -R 1000:1000 /usr/share/elasticsearch/data']
                volumeMounts:
                  - name: data
                    mountPath: /usr/share/elasticsearch/data
            terminationGracePeriodSeconds: 10
            containers:
              - name: elastic
                image: elasticsearch:7.0.0
                command:
                  - sh
                  - -c
                  - |
                    /usr/share/elasticsearch/bin/elasticsearch-plugin install repository-s3 -b;
                    /usr/share/elasticsearch/bin/elasticsearch-keystore create
                    echo {{ .Params.S3_ACCESS_KEY }} | /usr/share/elasticsearch/bin/elasticsearch-keystore add --stdin s3.client.default.access_key;
                    echo {{ .Params.S3_SECRET_KEY }} | /usr/share/elasticsearch/bin/elasticsearch-keystore add --stdin s3.client.default.secret_key;
                    /usr/local/bin/docker-entrypoint.sh eswrapper
                ports:
                  - containerPort: 9200
                    name: api
                  - containerPort: 9300
                    name:
                env:
                  - name: cluster.name
                    value: {{ .Name }}-cluster
                  - name: discovery.seed_hosts
                    value: {{ .Name }}-node-0.{{ .Name }}-hs,{{ .Name }}-node-1.{{ .Name }}-hs,{{ .Name }}-node-2.{{ .Name }}-hs
                  - name: cluster.initial_master_nodes
                    value: {{ .Name }}-node-0,{{ .Name }}-node-1,{{ .Name }}-node-2
                volumeMounts:
                  - name: data
                    mountPath: /usr/share/elasticsearch/data
        volumeClaimTemplates:
          - metadata:
              name: data
            spec:
              accessModes: [ "ReadWriteOnce" ]
              resources:
                requests:
                  storage: 1Gi
    backup.yaml: |
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: {{ .PlanName }}-job
        namespace: default
      spec:
        template:
          metadata:
            name: {{ .PlanName }}-job
          spec:
            restartPolicy: OnFailure
            containers:
              - name: backup
                image: centos:7
                command:
                  - sh
                  - -c
                  - |
                    curl -X PUT "myes-node-0.myes-hs:9200/_snapshot/my_s3_repository" -H 'Content-Type: application/json' -d'
                    {
                     "type": "s3",
                     "settings": {
                       "bucket": "es-bucket",
                       "endpoint": "{{ .Params.S3_ENDPOINT }}",
                       "protocol": "http"
                     }
                    }
                    ';
                    TS=$(date +%s);
                    curl -X PUT "myes-node-0.myes-hs:9200/_snapshot/my_s3_repository/snapshot_$TS?wait_for_completion=true&pretty"
    restore.yaml: |
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: {{ .PlanName }}-job
        namespace: default
      spec:
        template:
          metadata:
            name: {{ .PlanName }}-job
          spec:
            restartPolicy: OnFailure
            containers:
              - name: restore
                image: centos:7
                command:
                  - sh
                  - -c
                  - |
                    curl -X POST "myes-node-0.myes-hs:9200/_snapshot/my_s3_repository/{{ .Params.RESTORE_SNAPSHOT_ID }}/_restore?pretty"
  tasks:
    deploy-task:
      resources:
        - service.yaml
        - node.yaml
    backup-task:
      resources:
        - backup.yaml
    restore-task:
      resources:
        - restore.yaml
  plans:
    deploy:
      strategy: serial
      phases:
        - name: deploy-phase
          strategy: parallel
          steps:
            - name: deploy-step
              tasks:
                - deploy-task
    backup:
      strategy: serial
      phases:
        - name: backup-phase
          strategy: serial
          steps:
            - name: backup-step
              tasks:
                - backup-task
    restore:
      strategy: serial
      phases:
        - name: restore-phase
          strategy: serial
          steps:
            - name: restore-step
              tasks:
                - restore-task
